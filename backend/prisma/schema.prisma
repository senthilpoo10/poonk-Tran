generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum FriendshipStatus {
  NotFriend
  Pending
  Friend
}  

enum Gender {
  male
  female
  other
}

enum FavAvatar {
  None
  AstroAce
  PixelPirate
  RoboRacer
  ShadowNinja
  CyberKitty
  MysticMage
  CaptainQuasar
  NeonSamurai
  RocketRaccoon
  JungleJaguar
  AquaSpirit
  DesertPhantom
}

enum OnlineStatus {
  offline
  online
}
  
enum AuthProvider {
  email
  google
}

enum GameName {
  pingpong
  keyclash
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String?
  email         String    @unique
  isVerified           Boolean  @default(false)
  twoFactorSecret      String?
  twoFactorURL         String?
  twoFactorRegistered  Boolean  @default(false)
  googleId             String?
  firstName     String?
  lastName      String?
  dateOfBirth   String?
  gender        Gender    @default(other)
  favAvatar     FavAvatar @default(None)
  wins          Int       @default(0)
  losses        Int       @default(0)
  profilePic    String?
  online_status OnlineStatus @default(offline)
  last_activity Int          @default(0)
  lastLogin     DateTime?
  auth_provider AuthProvider @default(email)
  createdAt     DateTime @default(now())
  
  verificationCodes    VerificationCode[]
  passwordResetToken   PasswordResetToken?
  // Relations
  sentFriendships     Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  usedAt    DateTime? 
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Friendship {
  sender_id          Int
  receiver_id        Int
  sender_username    String
  receiver_username  String
  status             FriendshipStatus   @default(NotFriend)
  // Relations
  sender   User   @relation("SentFriendships", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User   @relation("ReceivedFriendships", fields: [receiver_id], references: [id], onDelete: Cascade)
  @@id([sender_id, receiver_id]) // composite primary key
}

model Game {
  id_game     Int       @id @default(autoincrement())
  id_player1  Int?
  id_player2  Int?
  date        DateTime  @default(now())
  rounds_json String
  game_name   GameName
}
